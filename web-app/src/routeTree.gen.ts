/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LivroImport } from './routes/livro'
import { Route as CanalImport } from './routes/canal'
import { Route as AutorImport } from './routes/autor'
import { Route as AssuntoImport } from './routes/assunto'
import { Route as IndexImport } from './routes/index'
import { Route as LivroIdImport } from './routes/livro/$id'
import { Route as CanalIdImport } from './routes/canal/$id'
import { Route as AutorIdImport } from './routes/autor/$id'
import { Route as AssuntoIdImport } from './routes/assunto/$id'

// Create/Update Routes

const LivroRoute = LivroImport.update({
  path: '/livro',
  getParentRoute: () => rootRoute,
} as any)

const CanalRoute = CanalImport.update({
  path: '/canal',
  getParentRoute: () => rootRoute,
} as any)

const AutorRoute = AutorImport.update({
  path: '/autor',
  getParentRoute: () => rootRoute,
} as any)

const AssuntoRoute = AssuntoImport.update({
  path: '/assunto',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LivroIdRoute = LivroIdImport.update({
  path: '/$id',
  getParentRoute: () => LivroRoute,
} as any)

const CanalIdRoute = CanalIdImport.update({
  path: '/$id',
  getParentRoute: () => CanalRoute,
} as any)

const AutorIdRoute = AutorIdImport.update({
  path: '/$id',
  getParentRoute: () => AutorRoute,
} as any)

const AssuntoIdRoute = AssuntoIdImport.update({
  path: '/$id',
  getParentRoute: () => AssuntoRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/assunto': {
      id: '/assunto'
      path: '/assunto'
      fullPath: '/assunto'
      preLoaderRoute: typeof AssuntoImport
      parentRoute: typeof rootRoute
    }
    '/autor': {
      id: '/autor'
      path: '/autor'
      fullPath: '/autor'
      preLoaderRoute: typeof AutorImport
      parentRoute: typeof rootRoute
    }
    '/canal': {
      id: '/canal'
      path: '/canal'
      fullPath: '/canal'
      preLoaderRoute: typeof CanalImport
      parentRoute: typeof rootRoute
    }
    '/livro': {
      id: '/livro'
      path: '/livro'
      fullPath: '/livro'
      preLoaderRoute: typeof LivroImport
      parentRoute: typeof rootRoute
    }
    '/assunto/$id': {
      id: '/assunto/$id'
      path: '/$id'
      fullPath: '/assunto/$id'
      preLoaderRoute: typeof AssuntoIdImport
      parentRoute: typeof AssuntoImport
    }
    '/autor/$id': {
      id: '/autor/$id'
      path: '/$id'
      fullPath: '/autor/$id'
      preLoaderRoute: typeof AutorIdImport
      parentRoute: typeof AutorImport
    }
    '/canal/$id': {
      id: '/canal/$id'
      path: '/$id'
      fullPath: '/canal/$id'
      preLoaderRoute: typeof CanalIdImport
      parentRoute: typeof CanalImport
    }
    '/livro/$id': {
      id: '/livro/$id'
      path: '/$id'
      fullPath: '/livro/$id'
      preLoaderRoute: typeof LivroIdImport
      parentRoute: typeof LivroImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AssuntoRoute: AssuntoRoute.addChildren({ AssuntoIdRoute }),
  AutorRoute: AutorRoute.addChildren({ AutorIdRoute }),
  CanalRoute: CanalRoute.addChildren({ CanalIdRoute }),
  LivroRoute: LivroRoute.addChildren({ LivroIdRoute }),
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/assunto",
        "/autor",
        "/canal",
        "/livro"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/assunto": {
      "filePath": "assunto.tsx",
      "children": [
        "/assunto/$id"
      ]
    },
    "/autor": {
      "filePath": "autor.tsx",
      "children": [
        "/autor/$id"
      ]
    },
    "/canal": {
      "filePath": "canal.tsx",
      "children": [
        "/canal/$id"
      ]
    },
    "/livro": {
      "filePath": "livro.tsx",
      "children": [
        "/livro/$id"
      ]
    },
    "/assunto/$id": {
      "filePath": "assunto/$id.tsx",
      "parent": "/assunto"
    },
    "/autor/$id": {
      "filePath": "autor/$id.tsx",
      "parent": "/autor"
    },
    "/canal/$id": {
      "filePath": "canal/$id.tsx",
      "parent": "/canal"
    },
    "/livro/$id": {
      "filePath": "livro/$id.tsx",
      "parent": "/livro"
    }
  }
}
ROUTE_MANIFEST_END */
